VDG – Plain-language Specification Scaffold (Runtime & Core)
================================================================

This document describes the intended program structure in plain language. It replaces prior
VSTO-centric notes with a standalone runtime that drives Microsoft Visio via COM automation.

===== Runtime Host (Visio COM Runner) =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Provide a small executable that automates Visio to create .vsdx files from a model
  (DiagramConfig + providers). This host is STA, 64-bit preferred, and targets net48
  for best COM interop reliability.

  Key Responsibilities
   • Start or attach to a Visio instance safely (hidden/silent option).
   • Ensure a drawing document and at least one page exist before drawing.
   • Load required stencils/templates hidden + read-only and cache them.
   • Execute draw commands (shapes first, connectors second).
   • Save the drawing to a normalized absolute path.
   • Dispose/release COM deterministically (no leaks).

  Interactions
   • Consumes: Pipeline output (DrawCommand list), TemplateManager, IVisioService.
   • Produces: Visio documents (.vsdx).

  Error Handling
   • Surface concise errors (COM HRESULTs mapped to friendly messages).
   • Fall back to safe shutdown on exceptions; no orphaned Visio instances.

  Future Enhancements
   • Optional: metrics/events; optional: upload link for web viewing.

===== DiagramConfig =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Holds configuration settings that control how diagrams are generated. Must remain JSON-serialisable.

  Key Responsibilities
   • Expose configuration or immutable data

  Interactions
   • Consumed by Pipeline and CLI; loaded via ConfigLoader.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== ConfigLoader =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Load and validate DiagramConfig from JSON. (Schema validation lives beside it in the CLI.)

  Key Responsibilities
   • Calculate or return data
   • Handle errors responsibly

  Interactions
   • Consumed by Pipeline and CLI; loaded via ConfigLoader.

  Error Handling
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements
   • Add more details once code is implemented.

===== DiagramItem =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Immutable data record used by the pipeline, layout algorithms, and drawing commands.

  Key Responsibilities
   • Expose configuration or immutable data
   • Perform an action

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== DiagramConnection =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Immutable data record representing an edge between two items.

  Key Responsibilities
   • Expose configuration or immutable data
   • Perform an action

  Interactions
   • Used by DiagramBuilder to create a routed connector between two shapes.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Notes (Pinned Connectors)
   • Connectors are created after both endpoint shapes exist.
   • The connector is glued to shape pins (center) or to a policy-selected connection point (N/E/S/W).
   • Routing may be re-applied after glue to ensure clean paths.

  Future Enhancements
   • Add policy for preferred sides, avoidance, label placement.

===== Logging =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Module/class generated from high-level pseudocode. Fill in implementation per the notes below.

  Key Responsibilities
   • Perform an action

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== ComSafety =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Encapsulate COM lifetime operations to prevent leaks and cross-thread issues.

  Key Responsibilities
   • Define a contract
   • Handle errors responsibly
   • Perform an action

  Interactions
   • Used by VisioServiceImpl and the runtime host to FinalReleaseComObject etc.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== IMapProvider =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Extracts model data from source assets (code, files, etc.) and exposes strongly-typed
  collections for the pipeline.

  Key Responsibilities
   • Calculate or return data
   • Define a contract

  Interactions
   • Supplies DiagramItem / DiagramConnection collections to Pipeline.

  Error Handling
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements
   • Add more details once code is implemented.

===== CallSiteMapProvider =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Example provider that discovers call sites or other relationships from code/text.

  Key Responsibilities
   • Calculate or return data
   • Handle errors responsibly

  Interactions
   • Supplies DiagramItem / DiagramConnection collections to Pipeline.

  Error Handling
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements
   • Add more details once code is implemented.

===== ILayoutAlgorithm =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Re-positions diagram items; purely functional, no side effects.

  Key Responsibilities
   • Calculate or return data
   • Define a contract

  Interactions
   • Receives raw items, returns positioned items to Pipeline.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== GridLayoutAlgorithm =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Simple layout that places items on a grid; side-effect free.

  Key Responsibilities
   • Calculate or return data

  Interactions
   • Receives raw items, returns positioned items to Pipeline.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== IVisioService =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Thin wrapper around Visio COM interop. Provides safe, testable surface area.

  Key Responsibilities
   • Calculate or return data
   • Define a contract
   • Perform an action

  Interactions
   • Used exclusively by DiagramBuilder; should never leak COM objects.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Connector Strategy (Pinned)
   • Provide an operation that creates a connector using the ConnectorToolDataObject.
   • Glue BeginX to the from-shape Pin and EndX to the to-shape Pin.
   • Optionally, allow policies to select specific connection points (N/E/S/W) before gluing.
   • Do not load a connectors stencil; the built-in connector tool suffices.

  Future Enhancements
   • Add a method to enumerate connection points and choose best candidates by geometry.

===== VisioServiceImpl =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Concrete implementation of IVisioService over Visio COM.

  Key Responsibilities
   • Calculate or return data
   • Perform an action

  Interactions
   • Used exclusively by DiagramBuilder; should never leak COM objects.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Implementation Notes
   • Start Visio (or attach), ensure a drawing + page.
   • Open stencils hidden + read-only and cache them; don’t switch ActiveDocument.
   • Drop masters for shapes first; maintain a map: logicalId → Visio.Shape.
   • Create connectors via Application.ConnectorToolDataObject:
       – Drop the connector on the page.
       – Glue BeginX to fromShape.CellsU["PinX"] and EndX to toShape.CellsU["PinX"].
       – Optionally re-route.
   • Save the drawing to a normalized absolute path; mkdir if needed.
   • Release all COM references deterministically.

  Future Enhancements
   • Label connectors; support arrowheads/styles via cell formulas.

===== Pipeline =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Glue logic that turns provider data into draw commands in a deterministic, testable fashion.

  Key Responsibilities
   • Calculate or return data
   • Perform an action

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== DrawCommand =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Light-weight message object instructing the builder what to draw.

  Key Responsibilities
   • Expose configuration or immutable data
   • Perform an action

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== CommandFactory =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Factory that translates positioned items + connections into DrawCommands.

  Key Responsibilities
   • Calculate or return data

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== DiagramBuilder =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Executes draw commands against the VisioService to build the document.

  Key Responsibilities
   • Perform an action

  Interactions
   • Consumes DrawCommand list generated by Pipeline; delegates to VisioService.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Build Order (Pinned Connectors)
   • Always drop shapes first and record their Visio.Shape references.
   • Then create connectors and glue to shape pins (or policy-selected connection points).
   • Apply layout-driven nudges or Visio routing as a final pass.

  Future Enhancements
   • Batch operations to reduce screen updates; apply themes/styles centrally.

===== DiagramGenerator =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Program entry module that wires Config → Providers → Pipeline → Builder → VisioService.

  Key Responsibilities
   • Perform an action

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.

===== TemplateManager =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Manages Visio templates, themes, and custom stencils.

  Key Responsibilities
   • Calculate or return data
   • Define a contract

  Interactions
   • Supplies master names/NameU mapping used by DiagramBuilder.

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Notes
   • Open stencils hidden + read-only; cache them.
   • Do not load a connectors stencil; connectors are created by the built-in tool.

  Future Enhancements
   • Add diagnostic: list first N masters, verify NameU mappings.

===== VBAMapProvider =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Extracts model data from exported VBA text or via VBIDE (when allowed) to feed nodes/edges.

  Key Responsibilities
   • Calculate or return data

  Interactions
   • Supplies DiagramItem / DiagramConnection collections to Pipeline.

  Error Handling
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements
   • Add more details once code is implemented.

===== LivePreviewService =====
=================================================================
  Purpose
  ----------------------------------------------------------------
  Creates quick browser-based previews of generated diagrams (e.g., OneDrive/SharePoint upload).

  Key Responsibilities
   • Calculate or return data

  Interactions
   • TBD

  Error Handling
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements
   • Add more details once code is implemented.
