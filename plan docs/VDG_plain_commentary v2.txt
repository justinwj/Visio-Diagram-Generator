===== Host Add‑ins (VSTO) =====
 =================================================================
  Integration Overview  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Replace the prior Excel/VBA‑hosted runner with a modern VSTO add‑in for Excel, while keeping the Visio VSTO add‑in. 
           Both add‑ins are thin shells that delegate to shared core logic (VDG.Core).

  Key Responsibilities:
   • Provide Ribbon commands in Excel and Visio to trigger generation.
   • Read DiagramConfig (from workbook range / JSON file path / settings) and call the shared pipeline.
   • Launch/attach to Visio via interop to render diagrams; optionally export and share a web preview link.

  Interactions:
   • Consumes: DiagramConfig, TemplateManager, PluginHost, LivePreviewService.
   • Produces: Visio documents (.vsdx), optional browser preview link via OneDrive/SharePoint.

  Error Handling:
   • If Visio is not installed or fails to launch, fall back to LivePreviewService (export and share link).
   • Surface actionable messages in‑ribbon (task pane or status bar).

  Deployment Notes:
   • Two per‑host VSTO projects: VDG.VisioAddIn and VDG.ExcelAddIn; both reference VDG.Core.
   • ClickOnce for simple rollout; MSI/Intune for enterprise.

  Important:
   • VBAMapProvider remains as a *data source parser for VBA code*, not a runner. End‑users now run VDG from the Excel VSTO add‑in.
 =================================================================

===== DiagramConfig =====
 =================================================================
  DiagramConfig  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Holds configuration settings that control how diagrams are generated. Must remain JSON‑serialisable.

  Key Responsibilities:
   • Expose configuration or immutable data

  Interactions:
   • Consumed by Pipeline and CLI; loaded via ConfigLoader.

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== ConfigLoader =====
 =================================================================
  ConfigLoader  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Holds configuration settings that control how diagrams are generated. Must remain JSON‑serialisable.

  Key Responsibilities:
   • Calculate or return data
   • Handle errors responsibly

  Interactions:
   • Consumed by Pipeline and CLI; loaded via ConfigLoader.

  Error Handling:
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== DiagramItem =====
 =================================================================
  DiagramItem  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Immutable data record used by the pipeline, layout algorithms, and drawing commands.

  Key Responsibilities:
   • Expose configuration or immutable data
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== DiagramConnection =====
 =================================================================
  DiagramConnection  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Immutable data record used by the pipeline, layout algorithms, and drawing commands.

  Key Responsibilities:
   • Expose configuration or immutable data
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== Logging =====
 =================================================================
  Logging  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Module/class generated from high‑level pseudocode. Fill in implementation per the notes below.

  Key Responsibilities:
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== ComSafety =====
 =================================================================
  ComSafety  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Module/class generated from high‑level pseudocode. Fill in implementation per the notes below.

  Key Responsibilities:
   • Define a contract
   • Handle errors responsibly
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== IMapProvider =====
 =================================================================
  IMapProvider  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Extracts model data from source assets (code, files, etc.) and exposes strongly‑typed collections for the pipeline.

  Key Responsibilities:
   • Calculate or return data
   • Define a contract

  Interactions:
   • Supplies DiagramItem / DiagramConnection collections to Pipeline.

  Error Handling:
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== CallSiteMapProvider =====
 =================================================================
  CallSiteMapProvider  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Immutable data record used by the pipeline, layout algorithms, and drawing commands.

  Key Responsibilities:
   • Calculate or return data
   • Handle errors responsibly

  Interactions:
   • Supplies DiagramItem / DiagramConnection collections to Pipeline.

  Error Handling:
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== ILayoutAlgorithm =====
 =================================================================
  ILayoutAlgorithm  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Re‑positions diagram items; purely functional, no side effects.

  Key Responsibilities:
   • Calculate or return data
   • Define a contract

  Interactions:
   • Receives raw items, returns positioned items to Pipeline.

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== GridLayoutAlgorithm =====
 =================================================================
  GridLayoutAlgorithm  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Re‑positions diagram items; purely functional, no side effects.

  Key Responsibilities:
   • Calculate or return data

  Interactions:
   • Receives raw items, returns positioned items to Pipeline.

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== IVisioService =====
 =================================================================
  IVisioService  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Thin wrapper around Visio COM interop. Provides safe, testable surface area.

  Key Responsibilities:
   • Calculate or return data
   • Define a contract
   • Perform an action

  Interactions:
   • Used exclusively by DiagramBuilder; should never leak COM objects.

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== VisioServiceImpl =====
 =================================================================
  VisioServiceImpl  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Thin wrapper around Visio COM interop. Provides safe, testable surface area.

  Key Responsibilities:
   • Calculate or return data
   • Perform an action

  Interactions:
   • Used exclusively by DiagramBuilder; should never leak COM objects.

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== Pipeline =====
 =================================================================
  Pipeline  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Glue logic that turns provider data into draw commands in a deterministic, testable fashion.

  Key Responsibilities:
   • Calculate or return data
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== DrawCommand =====
 =================================================================
  DrawCommand  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Light‑weight message object instructing the builder what to draw.

  Key Responsibilities:
   • Expose configuration or immutable data
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== CommandFactory =====
 =================================================================
  CommandFactory  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Light‑weight message object instructing the builder what to draw.

  Key Responsibilities:
   • Calculate or return data

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== DiagramBuilder =====
 =================================================================
  DiagramBuilder  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Executes draw commands against the VisioService to build the document.

  Key Responsibilities:
   • Perform an action

  Interactions:
   • Consumes DrawCommand list generated by Pipeline; delegates to VisioService.

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== DiagramGenerator =====
 =================================================================
  DiagramGenerator  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Module/class generated from high‑level pseudocode. Fill in implementation per the notes below.

  Key Responsibilities:
   • Perform an action

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== TemplateManager =====
 =================================================================
  TemplateManager  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Manages Visio templates, themes, and custom stencils.

  Key Responsibilities:
   • Calculate or return data
   • Define a contract

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== VBAMapProvider =====
 =================================================================
  VBAMapProvider  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Extracts model data from source assets (code, files, etc.) and exposes strongly‑typed collections for the pipeline.

  Key Responsibilities:
   • Calculate or return data

  Interactions:
   • Supplies DiagramItem / DiagramConnection collections to Pipeline.

  Error Handling:
   • Log and propagate exceptions; never swallow silently.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================


===== LivePreviewService =====
 =================================================================
  LivePreviewService  -  Plain‑language specification scaffold
 -----------------------------------------------------------------
  Purpose: Creates quick browser‑based previews of generated diagrams.

  Key Responsibilities:
   • Calculate or return data

  Interactions:
   • TBD

  Error Handling:
   • Use try/catch where necessary; fail fast otherwise.

  Future Enhancements:
   • Add more details once code is implemented.
 =================================================================

