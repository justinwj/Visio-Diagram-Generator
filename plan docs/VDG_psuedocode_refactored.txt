VDG – High-level Pseudocode Skeleton (v3)
=========================================
Mode: Stand‑alone CLI (no VSTO)
Target: net9.0-windows (x64, STA)  | Optional: net8.0-windows
Office: Microsoft® Visio® 2024 MSO (Version 2507 Build 16.0) 64‑bit or newer
Viewer: Visio for the web (NOT legacy Visio Viewer)

Conventions
-----------
Output folder: C:\Users\justu\OneDrive - Black Scottie Chai\Solution Notes
File name:     VDG-<yyyyMMdd-HHmmss-fff>-<GuidN>.vsdx  (UTC timestamp)
Regex:         ^VDG-\d{8}-\d{6}-\d{3}-[0-9a-f]{32}\.vsdx$

Diagram IR (JSON)
------------------
{
  "pages": [
    {
      "name": "Page-1",
      "shapes": [
        {"id": "start", "type": "Rectangle", "text": "Start"},
        {"id": "end",   "type": "Rectangle", "text": "End"}
      ],
      "connectors": [
        {"from": "start", "to": "end", "type": "DynamicConnector"}
      ],
      "layout": {"algorithm": "flow", "direction": "top-down"}
    }
  ],
  "stencil": "Basic Shapes.vssx",
  "theme": "Office"
}

Interfaces (Core Contracts)
---------------------------
IVisioService
  + AddShape(spec) -> ShapeId
  + AddConnector(fromId, toId, spec) -> ConnectorId
  + ApplyLayout(spec)
  + SaveAs(fullPath)
  + CommandLog (readonly sequence for tests)

ShapeSpec { id, type, text, x?, y?, w?, h? }
ConnectorSpec { type, routing? }
LayoutSpec { algorithm, direction }

CLI Orchestration (pseudocode)
------------------------------
main(args):
  parse args: -i <input.json> -o <outDir>
              [--open] [--upload-web] [--share-scope org|anon]
              [--log-level info|debug]
  ensure process is x64; ensure STA thread
  validate outDir exists or create
  diag = load_json(args.input)
  svc  = create VisioRuntimeAdapter()   // wraps COM; new instance per run

  try:
    svc.start_new_instance(visible=false, silent=true)
    stencil = diag.stencil or "Basic Shapes.vssx"
    svc.open_stencil(stencil)

    for page in diag.pages:
      svc.add_page(page.name)
      for s in page.shapes:
        id = svc.add_shape( ShapeSpec.from(s) )
        map s.id -> id
      for c in page.connectors:
        svc.add_connector( idOf(c.from), idOf(c.to), ConnectorSpec.from(c) )

      svc.apply_layout( LayoutSpec.from(page.layout) )

    filename = format("VDG-{utc-now:yyyyMMdd-HHmmss-fff}-{guid-n}.vsdx")
    fullpath = join(outDir, filename)
    svc.save_as(fullpath)

    result = { "path": fullpath, "pageCount": len(diag.pages) }

    if args.open:
      shell_open(fullpath)

    if args.upload_web:
      // OPTIONAL (later): upload to OneDrive/SPO via Graph
      // link = graph_upload_and_create_view_link(fullpath, scope=args.share_scope)
      // result["webLink"] = link

    log("OK", result)
    return 0

  catch (ex):
    log_error(ex)
    return 1

  finally:
    svc.shutdown()  // ensures COM release + app.Quit()

FakeVisioService (Test Double)
------------------------------
- In-memory IDs; no COM
- Records CommandLog entries:
    AddShape(type,text,at) -> sid
    AddConnector(fromSid,toSid,type) -> cid
    ApplyLayout(algorithm,direction)
    SaveAs(path)
- Layout math assertions:
    ensure nodes get non-overlapping coordinates in 'flow top-down'
    ensure connector intent recorded (from->to)

Tests (xUnit)
-------------
[Unit]   FilenamePattern_IsValid()
[Unit]   Layout_TopDown_AssignsMonotonicY()
[Unit]   CommandSequence_Matches_Expected()
[Integ]  UseCase_MinimalDiagram_ProducesPath_And_CommandLog()

Non-Goals (v3)
--------------
- VSTO Add-ins (Excel/Visio) – replaced by CLI
- Legacy Visio Viewer (ActiveX/IE)
- Real Graph upload flow (stubbed; can be enabled later)

Next Steps (scaffolding only – no business code yet)
----------------------------------------------------
- Create empty projects per folder structure JSON
- Add COM reference placeholder step (Visio Type Library) – manual check
- Add test project with FakeVisioService shell (no real interop)
