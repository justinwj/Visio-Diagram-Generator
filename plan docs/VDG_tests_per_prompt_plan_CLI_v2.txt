**every prompt** has quick checks, with deeper gates only where it matters.

# Revised tests-per-prompt plan

## What runs every prompt (≤3–5 min total)

1. **Build gate** – solution compiles cleanly (no red squiggles, no new warnings you care about).
2. **Unit gate** – run `VDG.Core.Tests` only (fast, no COM; uses `FakeVisioService`).
3. **Smoke gate (prompt-specific)** – click the ribbon action or call the entry function under test; assert a simple, observable result (file exists, commands > 0, friendly error shown). CLI tool buttons and core orchestration are already laid out in the skeleton, so we test those surfaces as they land.
4. **Perf budget** – quick timing guard:

   * Core unit tests: **< 5s**
   * Smoke action: **< 30s** (no Visio COM unless the checkpoint requires it)
   * Log durations to a simple text report (see “Reporting” below).

## Checkpoint gates (10–15 min, only at key milestones)

* **P4 (CLI wired)**: buttons render; clicking “Generate” logs N commands from pipeline.
* **P7 (Pipeline+Builder)**: with your exported VBA text, “Generate” creates a `.vsdx`; optional check: shapes ≥ modules. The export flow is in your VBA (`ExportAllCodeToSingleFiles`), so fixtures are realistic.
* **P9 (LivePreview stub)**: “Preview” returns a URL/string even if Visio isn’t installed.
* **P10 (VBAMapProvider)**: if Trust Center allows, richer nodes/edges; else clean fallback to TextExport provider.&#x20;
* **P12 (Packaging)**: install on a clean profile; add-in loads; smoke works.
* **P13/14 (F#)**: algorithm library tests pass; CLI `generate` runs headless with a tiny config.

## Negative paths we’ll cover (sprinkled in when relevant)

* **Missing/Bad inputs**: no `diagramConfig.json`, malformed JSON, wrong types (schema catches these).
* **VBA export issues**: missing/empty `StandardModulesCode.txt` or `ClassModulesCode.txt`; corrupted lines.
* **Visio not installed / COM attach fail**: use `PingVisio` style attach to prove graceful fallback to Preview.

## Schema validation matrix (Prompt 6)

Use `JsonSchema.Net` against `shared/Config/diagramConfig.schema.json`:

* Missing required fields, wrong types, out-of-range/negative values (e.g., page size < 0).
* Collect **multiple** errors and surface them with friendly messages in the CLI output. (This aligns with the Excel VSTO helpers in the skeleton.) 

## Fixtures & toggles

* **Fixtures** (`tests/fixtures/`):

  * `diagramConfig.sample.json`, `diagramConfig.invalid.json`
  * `StandardModulesCode.txt`, `ClassModulesCode.txt` (from your exporter)
* **Dev toggle**: `UseFakeVisio=true` to keep COM out of early smoke tests.
* **Diagnostic helpers**: stencil listing routines exist in your VBA to validate masters and nameU quirks—we’ll port light equivalents when needed.

## Reporting (tiny + automatic)

* After each prompt: write `tests/.last-run.txt` with:

  * Build result, unit count/pass, smoke outcome, **durations**, and perf OK/FAIL.
* At checkpoint gates: append an entry to `tests/checkpoints.log` with pass/fail, brief notes, and any perf deltas.

## Where this fits the delivery model

We’re doing **Plan 2** (pre-build tree, deliver only diffs each prompt). Test assets arrive the same way: only files relevant to that prompt (plus fixture updates when needed).
---

# Prompt-by-prompt testing snippets (condensed)

* **P1 Scaffold:** Build only (passes), baseline test project boots.
* **P2 Core contracts:** Run `VDG.Core.Tests` skeleton; perf <5s.
* **P3 VisioService wrapper:** Unit tests use `FakeVisioService`; one opt-in integration smoke (flagged) to attach Visio on your box if desired.&#x20;
* **P4 CLI:** Smoke: click “Generate”; verify log entry (command count) or temp file path emitted.
* **P5 Config+Schema:** CLI reads diagramConfig.json path, validates against shared/Config/diagramConfig.schema.json (JsonSchema.Net). 
Smoke: invalid config prints friendly errors to CLI, writes full report to %TEMP%/vdg-config-errors.json, exit code 2.** Unit: modules detected from `StandardModulesCode.txt`; Smoke: “Generate” shows N>0 items.
* **P6 Config+Schema:** Unit: valid vs invalid configs; Smoke: invalid produces friendly UI errors; perf <5s unit, <30s smoke.
* **P7 Pipeline+Builder:** Smoke: `.vsdx` created; shapes ≥ modules.
* **P8 Templates/Stencils:** Smoke: load `.vstx`/`.vssx`; diagnostic lists first 10 masters (ported from VBA).
* **P9 Preview stub:** Smoke: returns URL/string when Visio missing; negative test: simulate COM attach failure → still passes.
* **P10 VBA provider (opt):** Unit: when VBIDE blocked, fallback to TextExport; when allowed, richer set.
* **P11 Tests & smoketests:** Expand coverage for Pipeline/Layout/CommandFactory.
* **P12 Packaging:** Install → CLI visible → P4 smoke passes on clean profile.
* **P13/14 F#:** Unit tests in F# libs; CLI smoke: `generate` emits `.vsdx` headless (or mocked). (Folder map already includes these projects.)

---
