**every prompt** has quick checks, with deeper gates only where it matters.

# Tests-per-Prompt Plan — CLI / Runner (revised)

## What runs every prompt (≤3–5 min total)

1. **Build gate** — solution compiles cleanly (Core library, F# CLI **net8.0-windows**, Visio runner **net48** when present).
2. **Unit gate** — run `VDG.Core.Tests` only (fast, no COM; uses a `FakeVisioService`).
3. **Smoke gate (prompt-specific)** — call the **CLI** entry point for the surface under test (no Ribbon). Assert one simple, observable result (e.g., file exists, commands > 0, friendly error shown).
4. **Perf budget**
   * Core unit tests: **< 5s**
   * Smoke action: **< 30s** (COM only after Prompt 3; otherwise mocked)
   * Log durations to a tiny text report (see “Reporting”).

---

## Runner boundary (CLI ⇄ net48 host)

When the feature under test requires Visio COM, the CLI shells out to the **net48** `VDG.VisioRuntime.exe` via `Process.Start`.
For smoke tests that cross this boundary, assert:

* the runner’s **exit code = 0**;
* minimal **stdout** markers (e.g., “Saved diagram to …”);
* expected **side‑effect** (e.g., `.vsdx` exists).

If Visio is not installed or the runner is missing, CLI should print a **friendly error** and return a **non‑zero** exit code.

---

## Checkpoint gates (10–15 min, only at key milestones)

* **P7 (Pipeline+Builder)** — With exported VBA fixtures, `generate` creates a `.vsdx`; optional: **shapes ≥ modules**.
* **P9 (LivePreview stub)** — `preview` returns a URL/string **without** needing Visio.
* **P10 (VBAMapProvider)** — When VBIDE allowed: richer nodes/edges; when blocked: clean fallback to TextExport.
* **P12 (Packaging)** — Fresh profile: CLI visible, runner present, smoke passes end‑to‑end.
* **P13/14 (F#)** — Algorithms library tests pass; CLI `generate` runs headless or mocked.

---

## Negative paths to cover (sprinkled in as relevant)

* Missing/bad `diagramConfig.json` (malformed JSON, wrong types, out‑of‑range values).
* VBA export issues: missing/empty `StandardModulesCode.txt` or `ClassModulesCode.txt`.
* Visio not installed / cannot attach — CLI surfaces a clear message; returns non‑zero exit code.
* Runner not found or wrong bitness — CLI explains the fix (path/bitness), returns non‑zero.

---

## Schema validation matrix (Prompt 5)

Validate with **JsonSchema.Net** against `shared/Config/diagramConfig.schema.json`:

* Missing required fields, wrong types, out‑of‑range/negative values.
* Collect **multiple** errors and surface them as a readable table; write full details to `%TEMP%/vdg-config-errors.json`; **exit code 2** on validation failure.
* Aligns with the **CLI UX** (no VSTO surfaces).

---

## Fixtures & toggles

* **Fixtures** (`tests/fixtures/`):
  * `diagramConfig.sample.json`, `diagramConfig.invalid.json`
  * `StandardModulesCode.txt`, `ClassModulesCode.txt` (from your exporter)
* **Dev toggle**: `UseFakeVisio=true` — keeps COM out of early smoke tests.
* **Diagnostics**: add a light “list masters” check under TemplateManager when needed.

---

## Reporting (tiny + automatic)

After each prompt: write `tests/.last-run.txt` with **build result**, **unit pass counts**, **smoke outcome**, **durations**, and **perf OK/FAIL**.
At checkpoints: append to `tests/checkpoints.log` (pass/fail, brief notes, perf deltas).

---

## Where this fits the delivery model

We’re doing **Plan 2** (pre‑built tree, deliver only diffs per prompt). Test assets follow the same rule: only files relevant to the current prompt (plus fixture updates when needed).

---

# Prompt‑by‑prompt testing snippets (condensed)

* **P1 Scaffold** — Build only (passes). Baseline test project boots.
* **P2 Core contracts** — Run `VDG.Core.Tests` skeleton; perf < 5s.
* **P3 Visio runtime host (net48)** — Unit tests still use `FakeVisioService`; one **opt‑in** integration smoke (flagged) that calls the runner directly to verify **Visio attach** on a dev machine.
* **P5 Config+Schema (CLI)** — CLI reads `diagramConfig.json`, validates against `shared/Config/diagramConfig.schema.json`:
  * Smoke (invalid): prints friendly table; writes `%TEMP%/vdg-config-errors.json`; **exit code 2**.
  * Unit (providers): modules detected from `StandardModulesCode.txt`; Smoke (`generate` with fixtures): **N > 0 items**.
* **[Prompt 6 removed]**
* **P7 Pipeline+Builder** — Smoke: `.vsdx` created; **shapes ≥ modules**.
* **P8 Templates/Stencils** — Smoke: load `.vstx` / `.vssx`; diagnostic lists first 10 masters.
* **P9 Preview stub** — Smoke: returns URL/string when Visio missing; negative test simulates runner absence → CLI still returns helpful message.
* **P10 VBA provider (optional)** — Unit: when VBIDE blocked, fallback to TextExport; when allowed, richer set.
* **P11 Tests & smoketests** — Broaden coverage for Pipeline/Layout/CommandFactory.
* **P12 Packaging** — Install CLI + runner; smoke passes on a clean profile.
* **P13/14 F#** — Algorithm library tests; CLI `generate` emits `.vsdx` headless (or mocked).

