Param(
    [string]$Output = 'benchmarks/vba/massive_callgraph',
    [int]$Modules = 24,
    [int]$ProceduresPerModule = 25,
    [switch]$Overwrite,
    [switch]$GenerateArtifacts
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

if ($Modules -lt 1 -or $ProceduresPerModule -lt 1) {
    throw "Modules and ProceduresPerModule must be positive integers."
}

$procCount = $Modules * $ProceduresPerModule
Write-Host "Generating synthetic VBA fixture: modules=$Modules, procedures per module=$ProceduresPerModule (total $procCount)" -ForegroundColor Cyan

if (Test-Path $Output) {
    if (-not $Overwrite) {
        throw "Output directory '$Output' already exists. Use -Overwrite to rebuild."
    }
    Remove-Item -Recurse -Force -Path $Output
}

New-Item -ItemType Directory -Force -Path $Output | Out-Null

function Get-ProcedureName([int]$moduleIndex, [int]$procIndex) {
    return "Proc{0:D3}_{1:D3}" -f $moduleIndex, $procIndex
}

for ($m = 1; $m -le $Modules; $m++) {
    $moduleName = "Module{0:D3}" -f $m
    $filePath = Join-Path $Output "$moduleName.bas"
    $builder = New-Object System.Text.StringBuilder
    [void]$builder.AppendLine("Attribute VB_Name = ""$moduleName""")
    [void]$builder.AppendLine("Option Explicit")
    [void]$builder.AppendLine("")

    for ($p = 1; $p -le $ProceduresPerModule; $p++) {
        $procName = Get-ProcedureName -moduleIndex $m -procIndex $p
        $targetModule = (($m) % $Modules) + 1
        $targetProcIndex = (($p) % $ProceduresPerModule) + 1
        $targetProc = Get-ProcedureName -moduleIndex $targetModule -procIndex $targetProcIndex

        [void]$builder.AppendLine("Public Sub $procName()")
        [void]$builder.AppendLine("    ' Synthetic workload: chained call into next module/procedure")
        [void]$builder.AppendLine([string]::Format("    Module{0:D3}.{1}", $targetModule, $targetProc))
        [void]$builder.AppendLine("End Sub")
        [void]$builder.AppendLine("")
    }

    Set-Content -Path $filePath -Value $builder.ToString() -Encoding ASCII
}

$readmePath = Join-Path $Output "README.md"
$readme = @"
# massive_callgraph Fixture

- Generated by ``tools/benchmarks/New-MassiveCallgraph.ps1``
- Modules: $Modules
- Procedures per module: $ProceduresPerModule
- Total procedures: $procCount
- Each procedure calls into the subsequent module/procedure to simulate a dense callgraph.
"@
Set-Content -Path $readmePath -Value $readme -Encoding UTF8

if ($GenerateArtifacts) {
    $irOutput = 'benchmarks/ir'
    $diagOutput = 'benchmarks/diagram'
    New-Item -ItemType Directory -Force -Path $irOutput, $diagOutput | Out-Null

    $irPath = Join-Path $irOutput "massive_callgraph.ir.json"
    $diagramPath = Join-Path $diagOutput "massive_callgraph.diagram.json"

    Write-Host "Generating IR artifact -> $irPath" -ForegroundColor Green
    $irArgs = @('run', '--project', 'src/VDG.VBA.CLI', '--', 'vba2json', '--in', $Output, '--out', $irPath)
    $irResult = Start-Process -FilePath 'dotnet' -ArgumentList $irArgs -NoNewWindow -Wait -PassThru
    if ($irResult.ExitCode -ne 0) {
        throw "vba2json failed with exit code $($irResult.ExitCode)"
    }

    Write-Host "Generating diagram artifact -> $diagramPath" -ForegroundColor Green
    $diagramArgs = @('run', '--project', 'src/VDG.VBA.CLI', '--', 'ir2diagram', '--in', $irPath, '--out', $diagramPath, '--mode', 'callgraph')
    $diagramResult = Start-Process -FilePath 'dotnet' -ArgumentList $diagramArgs -NoNewWindow -Wait -PassThru
    if ($diagramResult.ExitCode -ne 0) {
        throw "ir2diagram failed with exit code $($diagramResult.ExitCode)"
    }
}

Write-Host "Synthetic fixture generated at $Output" -ForegroundColor Green
